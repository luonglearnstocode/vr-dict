{"version":3,"sources":["components/SignedInLinks.js","components/SignedOutLinks.js","components/Navbar.js","components/Word.js","components/Result.js","components/Suggestion.js","components/Dictionary.js","App.js","serviceWorker.js","index.js"],"names":["SignedInLinks","react_default","a","createElement","className","NavLink","to","SignedOutLinks","Navbar","Link","components_SignedInLinks","components_SignedOutLinks","languages","en","fi","da","de","sv","no","Word","_ref","language","word","usageNote","image","concat","src","alt","title","defaultProps","Result","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_ref2","setState","objectSpread","translations","filter","fromLanguage","map","key","components_Word","Component","Suggestion","getSuggestions","value","escapedValue","trim","replace","words","slice","regex","RegExp","test","getSuggestionValue","suggestion","renderSuggestion","components_Suggestion","shouldRenderSuggestions","length","Dictionary","onChange","event","newValue","result","onSuggestionsFetchRequested","_ref3","console","log","suggestions","onSuggestionsClearRequested","onSuggestionSelected","_ref4","suggestionValue","dict","w","lookUp","_this$state","inputProps","placeholder","dist_default","components_Result","App","document","BrowserRouter","components_Navbar","components_Dictionary","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ced5804.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedInLinks = () => (\n  <ul className=\"right\">\n    <li><NavLink to=\"/\">Logout</NavLink></li>\n    <li><NavLink to=\"/\" className=\"btn btn-floating red darken-1\">LN</NavLink></li>\n  </ul>\n);\n\nexport default SignedInLinks;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedOutLinks = () => (\n  <ul className=\"right\">\n    <li><NavLink to=\"/\">SignUp</NavLink></li>\n    <li><NavLink to=\"/\">Login</NavLink></li>\n  </ul>\n);\n\nexport default SignedOutLinks;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedInLink from './SignedInLinks';\nimport SignedOutLinks from './SignedOutLinks';\n\nconst Navbar = () => (\n  <nav className=\"nav-wrapper light-green darken-2 hide-on-med-and-down\">\n    <div className=\"container\">\n      <Link to=\"/\" className=\"brand-logo\">VR Translate</Link>\n      <SignedInLink />\n      <SignedOutLinks />\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst languages = {\n  en: 'English',\n  fi: 'Finnish',\n  da: 'Danish',\n  de: 'German',\n  sv: 'Swedish',\n  no: 'Norwegian',\n};\n\nfunction Word({ language, word, usageNote }) {\n  const image = `./images/flags/${language}.png`;\n  return (\n    <div className=\"row valign-wrapper\">\n      <div className=\"col s2 l1\">\n        <img src={image} alt={language} className=\"circle responsive-img\" title={languages[language]} />\n      </div>\n      <div className=\"col s9 l10\">\n        <h5>{ word }</h5>\n        <blockquote>\n          { usageNote }\n        </blockquote>\n      </div>\n    </div>\n  );\n}\n\nWord.propTypes = {\n  word: PropTypes.string.isRequired,\n  language: PropTypes.string.isRequired,\n  usageNote: PropTypes.string,\n};\n\nWord.defaultProps = {\n  usageNote: '',\n};\n\nexport default Word;\n","import React, { Component } from 'react';\n// import en from '../images/flags/en.png';\n// import de from '../images/flags/de.png';\n// import da from '../images/flags/da.png';\n// import fi from '../images/flags/fi.png';\n// import no from '../images/flags/no.png';\n// import sv from '../images/flags/sv.png';\nimport '../index.css';\nimport Word from './Word';\n\nconst languages = ['fi', 'en', 'de', 'sv', 'no', 'da'];\n\nclass Result extends Component {\n  constructor({ word }) {\n    super();\n    this.state = { word };\n  }\n\n  componentWillReceiveProps({ word }) {\n    this.setState({ ...this.state, word });\n  }\n\n  render() {\n    const { word } = this.state;\n\n    const translations = (\n      <ul>\n        {languages\n          .filter(language => language !== word.fromLanguage && `${language}Term` in word) // if dict has translation to this word\n          .map(language => <li key={language}><Word language={language} word={word[`${language}Term`]} usageNote={word[`${language}UsageNote`]} /></li>)}\n      </ul>\n    );\n\n    return (\n      <div className=\"result-box\">\n        <div className=\"col s12 m8 offset-m2 l6 offset-l3\">\n          <div className=\"card-panel grey lighten-2 z-depth-1\">\n            <Word language={word.fromLanguage} word={word[`${word.fromLanguage}Term`]} usageNote={word[`${word.fromLanguage}UsageNote`]} />\n          </div>\n          <div className=\"card-panel grey lighten-4 z-depth-1\">\n            {translations}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Suggestion({ word, language }) {\n  const image = `./images/flags/${language}.png`;\n  return (\n    <div className=\"row valign-wrapper\">\n      <div className=\"col s2 l1\">\n        <img src={image} alt={language} className=\"circle responsive-img\" />\n      </div>\n      <div className=\"col s9 l10\">\n        <span className=\"black-text\">\n          { word }\n        </span>\n      </div>\n    </div>\n  );\n}\n\nSuggestion.propTypes = {\n  word: PropTypes.string.isRequired,\n  language: PropTypes.string.isRequired,\n};\n\nexport default Suggestion;\n","import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Result from './Result';\nimport Suggestion from './Suggestion';\nimport dict from '../dict';\nimport words from '../words';\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction lookUp({ word, language }) { // look up word(suggestion) from dict\n  const result = dict.filter(w => w[`${language}Term`] === word)[0];\n  result.fromLanguage = language;\n  return result;\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') { // only display the first 100 words\n    return words.slice(0, 100);\n  }\n\n  const regex = new RegExp(`^${escapedValue}`, 'i');\n\n  return words.filter(word => regex.test(word.word));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.word;\n}\n\n\nfunction renderSuggestion(suggestion) {\n  return (\n    <Suggestion word={suggestion.word} language={suggestion.language} />\n  );\n}\n\nfunction shouldRenderSuggestions(value) {\n  return value.trim().length >= 0;\n}\n\nclass Dictionary extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      result: '',\n      suggestions: getSuggestions(''),\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      result: '',\n      value: newValue,\n    });\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    console.log('fetching');\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: getSuggestions(''),\n    });\n  };\n\n  onSuggestionSelected = (event, { suggestion, suggestionValue }) => {\n    // console.log(lookUp(suggestion));\n    this.setState({\n      result: lookUp(suggestion),\n      value: '', // clear input field after selected\n\n    });\n    // console.log(suggestionValue);\n  };\n\n\n  render() {\n    const { value, suggestions, result } = this.state;\n    const inputProps = {\n      placeholder: 'type',\n      value,\n      onChange: this.onChange,\n    };\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            onSuggestionSelected={this.onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            shouldRenderSuggestions={shouldRenderSuggestions}\n            // alwaysRenderSuggestions={true}\n            inputProps={inputProps}\n          />\n        </div>\n\n        { result ? <Result word={result} /> : null }\n      </div>\n    );\n  }\n}\n\nexport default Dictionary;\n","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Dictionary from './components/Dictionary';\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = 'VR Translate';\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <div className=\"container\">\n            <div className=\"row center-align\">\n              <img src=\"./images/logo.png\" alt=\"vr logo\" className=\"responsive-img\" />\n            </div>\n          </div>\n          <Dictionary />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}